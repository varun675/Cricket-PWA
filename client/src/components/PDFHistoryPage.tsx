import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { FileText, Download, Share, Search, Calendar, IndianRupee, Eye, ChevronLeft, ChevronRight } from "lucide-react";
import { PDFHistory, Player } from "@shared/schema";

interface PDFHistoryPageProps {
  pdfHistory: PDFHistory[];
  players: Player[];
  onDownloadPDF: (pdf: PDFHistory) => void;
  onSharePDF: (pdf: PDFHistory) => void;
  onViewPDF: (pdf: PDFHistory) => void;
}

export default function PDFHistoryPage({ 
  pdfHistory, 
  players,
  onDownloadPDF, 
  onSharePDF, 
  onViewPDF 
}: PDFHistoryPageProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(0);
  const itemsPerPage = 10;

  const filteredHistory = pdfHistory.filter(pdf => 
    pdf.opponentTeam.toLowerCase().includes(searchTerm.toLowerCase()) ||
    pdf.filename.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredHistory.length / itemsPerPage);
  const startIndex = currentPage * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentItems = filteredHistory.slice(startIndex, endIndex);

  const handlePrevPage = () => {
    setCurrentPage(prev => Math.max(0, prev - 1));
  };

  const handleNextPage = () => {
    setCurrentPage(prev => Math.min(totalPages - 1, prev + 1));
  };

  const generateMatchPDF = (pdf: PDFHistory) => {
    if (!pdf.matchData) return;
    
    const getPlayerById = (id: string) => players.find(p => p.id === id);
    const title = `United77 vs ${pdf.opponentTeam} - Fee Split`;

    // Build printable HTML content with full match details
    const paymentRows = pdf.matchData.payments
      .map((p) => {
        const player = players.find(pl => pl.id === p.playerId);
        const name = player?.name || p.playerId;
        const rawCategory = player?.category || '';
        const category = rawCategory.replace('_',' ');
        const isUnpaid = rawCategory === 'unpaid';
        const amountDue = isUnpaid ? 0 : p.amount;
        const note = isUnpaid ? 'covered by core' : '';
        return `<tr>
          <td style="padding:8px;border:1px solid #ddd;">${name}</td>
          <td style="padding:8px;border:1px solid #ddd;text-transform:capitalize;">${category}</td>
          <td style="padding:8px;border:1px solid #ddd;text-align:right;">₹${amountDue.toFixed(2)}</td>
          <td style="padding:8px;border:1px solid #ddd;">${note}</td>
        </tr>`;
      })
      .join('');

    const collectionTotal = pdf.matchData.payments.reduce((sum, p) => {
      const player = players.find(pl => pl.id === p.playerId);
      return sum + (player?.category === 'unpaid' ? 0 : p.amount);
    }, 0);

    const html = `<!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <title>${title}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji'; padding: 24px; color: #111827; }
          h1 { font-size: 20px; margin: 0 0 4px; }
          h2 { font-size: 16px; margin: 16px 0 8px; }
          .muted { color: #6b7280; font-size: 12px; }
          table { border-collapse: collapse; width: 100%; margin-top: 12px; }
          th { text-align: left; background: #f3f4f6; border: 1px solid #ddd; padding: 8px; }
          .total { font-weight: 700; }
          @media print { button { display: none; } }
        </style>
      </head>
      <body>
        <h1>${title}</h1>
        <div class="muted">Date: ${pdf.matchData.date}</div>
        <div class="muted">Total Fees: ₹${pdf.totalFees.toFixed(2)} | Players: ${pdf.matchData.feeSplit.totalPlayers}</div>
        <h2>Payments</h2>
        <table>
          <thead>
            <tr>
              <th>Player</th>
              <th>Category</th>
              <th style="text-align:right;">Amount</th>
              <th>Note</th>
            </tr>
          </thead>
          <tbody>
            ${paymentRows}
            <tr>
              <td colspan="2" class="total" style="padding:8px;border:1px solid #ddd;">Total Collection Required</td>
              <td class="total" style="padding:8px;border:1px solid #ddd;text-align:right;">₹${collectionTotal.toFixed(2)}</td>
              <td></td>
            </tr>
          </tbody>
        </table>
        <div class="muted" style="margin-top:8px;">Generated by United77 Cricket Fees Manager</div>
        <button onclick="window.print()" style="margin-top:16px;padding:8px 12px;">Print / Save as PDF</button>
      </body>
    </html>`;

    const win = window.open('', '_blank');
    if (win) {
      win.document.open();
      win.document.write(html);
      win.document.close();
      win.focus();
    }
  };

  const handleDownload = (pdf: PDFHistory) => {
    generateMatchPDF(pdf);
  };

  const handleShare = (pdf: PDFHistory) => {
    const message = `United77 vs ${pdf.opponentTeam}\nDate: ${formatDate(pdf.createdAt)}\nTotal Fees: ${formatCurrency(pdf.totalFees)}\n\nGenerated by United77 Cricket Fees Manager`;
    
    if (navigator.share) {
      navigator.share({
        title: `United77 vs ${pdf.opponentTeam}`,
        text: message,
      });
    } else {
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
      window.open(whatsappUrl, '_blank');
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  const formatCurrency = (amount: number) => `₹${amount.toFixed(2)}`;

  return (
    <div className="space-y-6 pb-20" data-testid="page-pdf-history">
      {/* Header */}
      <div className="flex items-center gap-3">
        <FileText className="h-6 w-6 text-primary" />
        <div>
          <h1 className="text-xl font-semibold">PDF History</h1>
          <p className="text-sm text-muted-foreground">
            {pdfHistory.length} saved reports
          </p>
        </div>
      </div>

      {/* Search */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          placeholder="Search by opponent team or filename..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-10"
          data-testid="input-search-pdf"
        />
      </div>

      {/* Recent PDFs */}
      {filteredHistory.length > 0 && (
        <div className="space-y-3">
          <h2 className="text-lg font-medium">Match Reports</h2>
          
          {currentItems.map((pdf) => (
            <Card key={pdf.id} className="hover-elevate" data-testid={`card-pdf-${pdf.id}`}>
              <CardContent className="p-4">
                <div className="flex items-start justify-between gap-4">
                  <div className="flex items-start gap-3 flex-1">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <FileText className="h-5 w-5 text-primary" />
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="font-medium text-sm truncate" data-testid={`text-opponent-${pdf.id}`}>
                          United77 vs {pdf.opponentTeam}
                        </h3>
                        <Badge variant="outline" className="text-xs">
                          {formatCurrency(pdf.totalFees)}
                        </Badge>
                      </div>
                      
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          <span data-testid={`text-date-${pdf.id}`}>{formatDate(pdf.createdAt)}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <FileText className="h-3 w-3" />
                          <span className="truncate" data-testid={`text-filename-${pdf.id}`}>{pdf.filename}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => generateMatchPDF(pdf)}
                      data-testid={`button-view-${pdf.id}`}
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => handleDownload(pdf)}
                      data-testid={`button-download-${pdf.id}`}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => handleShare(pdf)}
                      className="text-green-600"
                      data-testid={`button-share-${pdf.id}`}
                    >
                      <Share className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
          
          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex items-center justify-between mt-6">
              <div className="text-sm text-muted-foreground">
                Showing {startIndex + 1}-{Math.min(endIndex, filteredHistory.length)} of {filteredHistory.length} reports
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handlePrevPage}
                  disabled={currentPage === 0}
                >
                  <ChevronLeft className="h-4 w-4" />
                  Previous
                </Button>
                <span className="text-sm text-muted-foreground">
                  Page {currentPage + 1} of {totalPages}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleNextPage}
                  disabled={currentPage === totalPages - 1}
                >
                  Next
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Empty State */}
      {filteredHistory.length === 0 && (
        <Card>
          <CardContent className="py-12 text-center">
            <FileText className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
            <h3 className="text-lg font-medium mb-2">
              {searchTerm ? 'No PDFs found' : 'No match reports yet'}
            </h3>
            <p className="text-muted-foreground text-sm mb-4">
              {searchTerm 
                ? 'Try adjusting your search terms' 
                : 'PDFs will appear here after you calculate and save match fees'
              }
            </p>
            {!searchTerm && (
              <Badge variant="outline">Calculate your first match to get started!</Badge>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}